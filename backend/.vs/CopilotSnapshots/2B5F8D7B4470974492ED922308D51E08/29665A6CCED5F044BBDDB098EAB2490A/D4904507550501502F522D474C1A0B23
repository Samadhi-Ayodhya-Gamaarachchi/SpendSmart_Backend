using Microsoft.AspNetCore.Mvc;
using SpendSmart_Backend.Services;

namespace SpendSmart_Backend.Controllers
{
    [ApiController]
    [Route("api/[controller]")]
    public class DatabaseController : ControllerBase
    {
        private readonly DatabaseSeeder _databaseSeeder;
        private readonly ILogger<DatabaseController> _logger;

        public DatabaseController(DatabaseSeeder databaseSeeder, ILogger<DatabaseController> logger)
        {
            _databaseSeeder = databaseSeeder;
            _logger = logger;
        }

        [HttpGet("test-connection")]
        public async Task<IActionResult> TestConnection()
        {
            try
            {
                var isConnected = await _databaseSeeder.TestConnectionAsync();
                
                if (isConnected)
                {
                    return Ok(new { 
                        success = true, 
                        message = "Database connection successful!", 
                        timestamp = DateTime.UtcNow 
                    });
                }
                else
                {
                    return BadRequest(new { 
                        success = false, 
                        message = "Database connection failed!", 
                        timestamp = DateTime.UtcNow 
                    });
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error testing database connection");
                return StatusCode(500, new { 
                    success = false, 
                    message = "Internal server error while testing connection", 
                    error = ex.Message,
                    timestamp = DateTime.UtcNow 
                });
            }
        }

        [HttpPost("seed")]
        public async Task<IActionResult> SeedDatabase()
        {
            try
            {
                await _databaseSeeder.SeedAsync();
                return Ok(new { 
                    success = true, 
                    message = "Database seeded successfully!", 
                    timestamp = DateTime.UtcNow 
                });
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error seeding database");
                return StatusCode(500, new { 
                    success = false, 
                    message = "Failed to seed database", 
                    error = ex.Message,
                    timestamp = DateTime.UtcNow 
                });
            }
        }

        [HttpGet("stats")]
        public async Task<IActionResult> GetDatabaseStats()
        {
            try
            {
                var stats = await _databaseSeeder.GetDatabaseStatsAsync();
                return Ok(new { 
                    success = true, 
                    data = stats, 
                    timestamp = DateTime.UtcNow 
                });
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error retrieving database statistics");
                return StatusCode(500, new { 
                    success = false, 
                    message = "Failed to retrieve database statistics", 
                    error = ex.Message,
                    timestamp = DateTime.UtcNow 
                });
            }
        }

        [HttpPost("ensure-created")]
        public async Task<IActionResult> EnsureDatabaseCreated()
        {
            try
            {
                var success = await _databaseSeeder.EnsureDatabaseCreatedAsync();
                
                if (success)
                {
                    return Ok(new { 
                        success = true, 
                        message = "Database ensured to be created!", 
                        timestamp = DateTime.UtcNow 
                    });
                }
                else
                {
                    return BadRequest(new { 
                        success = false, 
                        message = "Failed to ensure database creation!", 
                        timestamp = DateTime.UtcNow 
                    });
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error ensuring database creation");
                return StatusCode(500, new { 
                    success = false, 
                    message = "Internal server error while ensuring database creation", 
                    error = ex.Message,
                    timestamp = DateTime.UtcNow 
                });
            }
        }
    }
}