using Microsoft.EntityFrameworkCore;
using SpendSmart_Backend.Models;

namespace SpendSmart_Backend.Data
{
    public class ApplicationDbContext : DbContext
    {
        public ApplicationDbContext(DbContextOptions<ApplicationDbContext> options) : base(options)
        {
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);
            
            // Configure UserAdmin composite key and relationships
            modelBuilder.Entity<UserAdmin>()
                .HasKey(ua => new { ua.UserId, ua.ManagerId });
            
            modelBuilder.Entity<UserAdmin>()
                .HasOne(ua => ua.User)
                .WithMany(u => u.UserAdmins)
                .HasForeignKey(ua => ua.UserId)
                .OnDelete(DeleteBehavior.Restrict);

            modelBuilder.Entity<UserAdmin>()
                .HasOne(ua => ua.Manager)
                .WithMany(u => u.ManagedUsers)
                .HasForeignKey(ua => ua.ManagerId)
                .OnDelete(DeleteBehavior.Restrict);

            // Configure Goal-User relationship
            modelBuilder.Entity<Goal>()
                .HasOne(g => g.User)
                .WithMany(u => u.Goals)
                .HasForeignKey(g => g.UserId)
                .OnDelete(DeleteBehavior.Restrict);

            // Configure SavingRecord relationships
            modelBuilder.Entity<SavingRecord>()
                .HasOne(sr => sr.Goal)
                .WithMany()
                .HasForeignKey(sr => sr.GoalId)
                .OnDelete(DeleteBehavior.Restrict);

            modelBuilder.Entity<SavingRecord>()
                .HasOne(sr => sr.User)
                .WithMany(u => u.SavingRecords)
                .HasForeignKey(sr => sr.UserId)
                .OnDelete(DeleteBehavior.Restrict);

            // Configure decimal precision and scale for Budget entity
            modelBuilder.Entity<Budget>()
                .Property(b => b.AllocatedAmount)
                .HasPrecision(18, 2);

            modelBuilder.Entity<Budget>()
                .Property(b => b.SpendAmount)
                .HasPrecision(18, 2);

            // Configure decimal precision and scale for Goal entity
            modelBuilder.Entity<Goal>()
                .Property(g => g.TargetAmount)
                .HasPrecision(18, 2);

            modelBuilder.Entity<Goal>()
                .Property(g => g.CurrentAmount)
                .HasPrecision(18, 2);

            // Configure decimal precision and scale for Transaction entity
            modelBuilder.Entity<Transaction>()
                .Property(t => t.Amount)
                .HasPrecision(18, 2);

            // Configure decimal precision and scale for SavingRecord entity
            modelBuilder.Entity<SavingRecord>()
                .Property(sr => sr.Amount)
                .HasPrecision(18, 2);

            // Configure Transaction relationships
            modelBuilder.Entity<Transaction>()
                .HasOne(t => t.Category)
                .
